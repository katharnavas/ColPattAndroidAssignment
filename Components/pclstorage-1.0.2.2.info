{"Name":"File System Plugin for Xamarin and Windows","Id":2544,"Alias":"pclstorage","Description":"# File System Plugin for Xamarin and Windows details\n\nThe File System Plugin for Xamarin and Windows provides a consistent, portable set \nof local file IO APIs for .NET, Windows Phone, Windows Store, Xamarin.iOS, \nXamarin.Android, and Silverlight. This makes it easier to create cross-platform \n.NET libraries and apps.\n\nDifferent .NET platforms have different APIs for accessing the file system or\nan app-local persisted storage area. The full .NET Framework provides the\nstandard file and directory APIs (in the System.IO namespace), Silverlight and\nWindows Phone provide isolated storage APIs, and WinRT provides storage APIs in\nthe Windows.Storage namespace.\n\nHere is a sample showing how you can use the File System Plugin for Xamarin and Windows\nto create a folder and write to a text file in that folder:\n\n```\npublic async Task CreateRealFileAsync()\n{\n    // get hold of the file system\n    IFolder rootFolder = FileSystem.Current.LocalStorage;\n    \n    // create a folder, if one does not exist already\n    IFolder folder = await rootFolder.CreateFolderAsync(\"MySubFolder\", CreationCollisionOption.OpenIfExists);\n    \n    // create a file, overwriting any existing file\n    IFile file = await folder.CreateFileAsync(\"MyFile.txt\", CreationCollisionOption.ReplaceExisting);\n    \n    // populate the file with some text\n    await file.WriteAllTextAsync(\"Sample Text...\");\n}\n```\n\n## APIs\n\nThe primary APIs in the File System Plugin for Xamarin and Windows are the \n`IFile`, `IFolder`, and `IFileSystem` interfaces. The APIs should be\nmostly self-explanatory and should feel very familiar if you have used \nthe WinRT storage APIs.\n\nThe `IFileSystem` interface is the main API entry point. You can get an instance\nof the implementation for the current platform with the `FileSystem.Current`\nproperty.\n","Version":"1.0.2.2","Summary":"The File System Plugin for Xamarin and Windows provides a consistent, portable set of local file IO APIs for Windows Phone, Xamarin.iOS and Xamarin.Android.","QuickStart":"# Getting Started with File System Plugin for Xamarin and Windows\n\nThe File System Plugin for Xamarin and Windows provides a consistent, portable set \nof local file IO APIs for .NET, Windows Phone, Windows Store, Xamarin.iOS,\nXamarin.Android, and Silverlight. This makes it easier to create cross-platform \n.NET libraries and apps.\n\nHere is a sample showing how you can use the File System Plugin for Xamarin and Windows\nto create a folder and write to a text file in that folder:\n\n```\npublic async Task CreateRealFileAsync()\n{\n    // get hold of the file system\n    IFolder rootFolder = FileSystem.Current.LocalStorage;\n    \n    // create a folder, if one does not exist already\n    IFolder folder = await rootFolder.CreateFolderAsync(\"MySubFolder\", CreationCollisionOption.OpenIfExists);\n    \n    // create a file, overwriting any existing file\n    IFile file = await folder.CreateFileAsync(\"MyFile.txt\", CreationCollisionOption.ReplaceExisting);\n    \n    // populate the file with some text\n    await file.WriteAllTextAsync(\"Sample Text...\");\n}\n```\n\n## Background information\n\nDifferent .NET platforms have different APIs for accessing the file system or\nan app-local persisted storage area. The full .NET Framework provides the\nstandard file and directory APIs (in the System.IO namespace), Silverlight and\nWindows Phone provide isolated storage APIs, and WinRT provides storage APIs in\nthe Windows.Storage namespace.\n\nThese differing APIs make it harder to write cross-platform code. Traditionally,\nyou could handle this via conditional compilation. However, that means you can\u0027t\ntake advantage of Portable Class Libraries, and in any case may not scale well\nas your code gets complex (and especially because for WinRT you need to use\nasync APIs).\n\nAlternatively, you can create an abstraction for the functionality you need\nacross platforms, and implement the abstraction for each platform you need to\nuse. This approach allows you to use Portable Class Libraries, and in general\nmakes your code cleaner and more maintainable by isolating the platform-specific\npieces instead of having them sprinkled arbitrarily throughout your code.\n\nWriting an abstraction layer is a bit of a barrier to entry to writing\ncross-platform code, and there\u0027s no reason everyone should have to do it\nseparately for functionality as commonly needed as local file IO. The\nFile System Plugin for Xamarin and Windows aims to provide a common abstraction\nthat is easy to take advantage of.\n\n## APIs\n\nThe primary APIs in the File System Plugin for Xamarin and Windows are the \n`IFile`, `IFolder`, and `IFileSystem` interfaces. The APIs should be mostly\nself-explanatory and should feel very familiar if you have used the WinRT \nstorage APIs.\n\nThe `IFileSystem` interface is the main API entry point. You can get an instance\nof the implementation for the current platform with the `FileSystem.Current`\nproperty.\n\nHere are some of the basic storage types:\n\n```\nnamespace PCLStorage\n{\n    public static class FileSystem\n    {\n        public static IFileSystem Current { get; }\n    }\n\n    public interface IFileSystem\n    {\n        IFolder LocalStorage { get; }\n        IFolder RoamingStorage { get; }\n\n        Task\u003cIFile\u003e GetFileFromPathAsync(string path);\n        Task\u003cIFolder\u003e GetFolderFromPathAsync(string path);\n    }\n\n    public interface IFolder\n    {\n        string Name { get; }\n        string Path { get; }\n\n        Task\u003cIFile\u003e CreateFileAsync(string desiredName, CreationCollisionOption option);\n        Task\u003cIFile\u003e GetFileAsync(string name);\n        Task\u003cIList\u003cIFile\u003e\u003e GetFilesAsync();\n\n        Task\u003cIFolder\u003e CreateFolderAsync(string desiredName, CreationCollisionOption option);\n        Task\u003cIFolder\u003e GetFolderAsync(string name);\n        Task\u003cIList\u003cIFolder\u003e\u003e GetFoldersAsync();\n\n        Task\u003cExistenceCheckResult\u003e CheckExistsAsync(string name, CancellationToken cancellationToken);\n\n        Task DeleteAsync();\n    }\n\n    public interface IFile\n    {\n        string Name { get; }\n        string Path { get; }\n\n        Task\u003cStream\u003e OpenAsync(FileAccess fileAccess);\n        Task DeleteAsync();\n        Task RenameAsync(string newName, NameCollisionOption collisionOption, CancellationToken cancellationToken);\n        Task MoveAsync(string newPath, NameCollisionOption collisionOption, CancellationToken cancellationToken);\n    }\n} \n\n```","Hash":"e2de2cf8fc6433e236c0c51a5a6f1f57","TargetPlatforms":["ios","android"],"TrialHash":null}